import regex as re

# Standard tafail (metrical feet) for each meter
TAFAIL = {
 "الطويل":   "فعولن مفاعيلن فعولن مفاعيلن",
 "المديد":   "فاعلاتن فاعلن فاعلاتن",
 "البسيط":   "مستفعلن فاعلن مستفعلن فاعلن",
 "الوافر":   "مفاعلتن مفاعلتن فعولن",
 "الكامل":   "متفاعلن متفاعلن متفاعلن",
 "الهزج":    "مفاعيلن مفاعيلن مفاعيلن مفاعيلن",
 "الرجز":    "مستفعلن مستفعلن مستفعلن",
 "الرمل":    "فاعلاتن فاعلاتن فاعلاتن",
 "السريع":   "مستفعلن مستفعلن مفعولاتُ",
 "المنسرح":  "مستفعلن مفعولاتُ مستفعلن",
 "الخفيف":   "فاعلاتن مستفعلن فاعلاتن",
 "المضارع":  "مفاعيلن فاعلاتن مفاعيلن فاعلاتن",
 "المقتضب":  "مفعولاتُ مستفعلن مفعولاتُ",
 "المجتث":   "مستفعلن فاعلاتن مستفعلن فاعلاتن",
 "المتقارب": "فعولن فعولن فعولن فعولن",
 "المتدارك": "فاعلن فاعلن فاعلن فاعلن",
}

# Regex patterns (∪ short, – long) approximating meters with common zihaf/illah
B_REGEX = {
 "الطويل":   re.compile(r"(–∪––)(–∪∪–){1}(–∪––)(–∪∪–){1}"),
 "المديد":   re.compile(r"(–∪∪–∪–)(–∪–)(–∪∪–∪–)"),
 "البسيط":   re.compile(r"(–∪∪–∪–)(–∪–)(–∪∪–∪–)(–∪–)"),
 "الوافر":   re.compile(r"(–∪–∪–∪)(–∪–∪–∪)(–∪––)"),
 "الكامل":   re.compile(r"(–∪∪–∪∪–){3}"),
 "الهزج":    re.compile(r"(–∪∪–∪∪–){4}"),
 "الرجز":    re.compile(r"(–∪∪–){3}"),
 "الرمل":    re.compile(r"(–∪–∪∪–){3}"),
 "السريع":   re.compile(r"(–∪∪–){2}(–∪–∪–)"),
 "المنسرح":  re.compile(r"(–∪∪–)(–∪–∪–)(–∪∪–)"),
 "الخفيف":   re.compile(r"(–∪–∪∪–)(–∪∪–)(–∪–∪∪–)"),
 "المضارع":  re.compile(r"(–∪∪–∪∪–)(–∪–∪∪–)(–∪∪–∪∪–)(–∪–∪∪–)"),
 "المقتضب":  re.compile(r"(–∪–∪–)(–∪∪–)(–∪–∪–)"),
 "المجتث":   re.compile(r"(–∪∪–)(–∪–∪∪–)(–∪∪–)(–∪–∪∪–)"),
 "المتقارب": re.compile(r"(–∪––){4}"),
 "المتدارك": re.compile(r"(–∪–){4}"),
}

def rule_match(prosody: str):
    """Match a prosody pattern against known meters and return (meter, tafail, confidence)."""
    for meter, rx in B_REGEX.items():
        if rx.search(prosody):
            return meter, TAFAIL[meter], 0.75
    return None, "", 0.0
